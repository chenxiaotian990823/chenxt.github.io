(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{395:function(t,v,a){"use strict";a.r(v);var s=a(28),e=Object(s.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"mvc、mvvm和mvp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvc、mvvm和mvp"}},[t._v("#")]),t._v(" mvc、mvvm和mvp")]),t._v(" "),a("h2",{attrs:{id:"mvc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[t._v("#")]),t._v(" mvc")]),t._v(" "),a("p",[t._v("MVC模式的意思是，软件可以分成三个部分。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/mvc.png",alt:"avatar"}})]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("ul",[a("li",[t._v("视图（View）：用户界面。")]),t._v(" "),a("li",[t._v("控制器（Controller）：业务逻辑")]),t._v(" "),a("li",[t._v("模型（Model）：数据保存")])])]),t._v(" "),a("p",[t._v("各部分之间的通信方式如下:")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/mvcCommunicate.png",alt:"avatar"}})]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("通信步骤")]),t._v(" "),a("p",[t._v("1、View 传送指令到 Controller"),a("br"),t._v("\n2、Controller 完成业务逻辑后，要求 Model 改变状态"),a("br"),t._v("\n3、Model 将新的数据发送到 View，用户得到反馈")]),t._v(" "),a("p",[t._v("注:所有通信都是单向的。")])]),t._v(" "),a("p",[a("font",{attrs:{color:"#FF8C00",size:"5"}},[t._v("mvc互动模式")])],1),t._v(" "),a("p",[t._v("接受用户指令时，MVC 可以分成两种方式。一种是通过 View 接受指令，传递给 Controller。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/mvcInteractive1.png",alt:"avatar"}})]),t._v(" "),a("p",[t._v("另一种是直接通过controller接受指令。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/mvcInteractive2.png",alt:"avatar"}})]),t._v(" "),a("h2",{attrs:{id:"mvp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvp"}},[t._v("#")]),t._v(" mvp")]),t._v(" "),a("p",[t._v("MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/mvp.png",alt:"avatar"}})]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("1、各部分之间的通信，都是双向的。"),a("br"),t._v("\n2、View 与 Model 不发生联系，都通过 Presenter 传递。"),a("br"),t._v('\n3、View 非常薄，不部署任何业务逻辑，称为"被动视图"（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。')])]),t._v(" "),a("h2",{attrs:{id:"mvvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvvm"}},[t._v("#")]),t._v(" mvvm")]),t._v(" "),a("p",[t._v("MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/mvvm.png",alt:"avatar"}})]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。Angular 和 Ember 都采用这种模式。")])])])}),[],!1,null,null,null);v.default=e.exports}}]);